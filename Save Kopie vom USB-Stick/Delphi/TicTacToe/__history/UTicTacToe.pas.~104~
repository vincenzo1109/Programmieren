unit UTicTacToe;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.Menus, Vcl.StdCtrls, math;

type
  TForm1 = class(TForm)
    PanelTopLeft: TPanel;
    PanelTopMiddle: TPanel;
    PanelTopRight: TPanel;
    PanelMiddleLeft: TPanel;
    PanelMiddleMiddle: TPanel;
    PanelMiddleRight: TPanel;
    PanelBottomLeft: TPanel;
    PanelBottomMiddle: TPanel;
    PanelBottomRight: TPanel;
    LabelPoints: TLabel;
    LabelPointsSchow: TLabel;
    Button1: TButton;
    ButtonNewGame: TButton;
    RadioGroup1: TRadioGroup;
    RadioGroup2: TRadioGroup;
    procedure PanelTopLeftClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ButtonNewGameClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure WirHabenGewinner(PlayerString: String);
    procedure ShowField();
    procedure neuesSpiel();
    procedure Unentschieden();
    function rating(gameField: array of char): integer;
    function ZuegeSetzen(currentField: Array of char; currentPlayer: char; deep: integer): integer;
    function prüfungUnentschieden(currentField: Array of char): boolean;
    procedure optimalerZug();
    procedure RadioGroup1Click(Sender: TObject);
    procedure RadioGroup2Click(Sender: TObject);
  private
    { Private-Deklarationen }
  public
    { Public-Deklarationen }
  end;

var
  Form1: TForm1;
  a, x, o, AllCaptions, Tiefe: integer;
  panels: array [1 .. 9] of TPanel;
  fieldShow: array [1 .. 9] of char;
  gametype: string;

implementation

{$R *.dfm}


procedure TForm1.Button1Click(Sender: TObject);
begin
  x := 0;
  o := 0;
  LabelPointsSchow.Caption := '0 : 0';
end;


procedure TForm1.ShowField();
var
  i, r: integer;
begin
  for i := 1 to 9 do
    panels[i].Caption := fieldShow[i];
  r := rating(fieldShow);

  if r = -1 then
    WirHabenGewinner('X');
  if r = 1 then
    WirHabenGewinner('O');
  if prüfungUnentschieden(fieldShow) = True then
    Unentschieden();

end;


procedure TForm1.ButtonNewGameClick(Sender: TObject);
begin
  neuesSpiel();

end;


procedure TForm1.FormCreate(Sender: TObject);
var
  i: integer;
begin
  a := 0;
  panels[1] := PanelTopLeft;
  panels[2] := PanelTopMiddle;
  panels[3] := PanelTopRight;
  panels[4] := PanelMiddleLeft;
  panels[5] := PanelMiddleMiddle;
  panels[6] := PanelMiddleRight;
  panels[7] := PanelBottomLeft;
  panels[8] := PanelBottomMiddle;
  panels[9] := PanelBottomRight;
  for i := 1 to 9 do
  begin
    panels[i].Tag := i;
    panels[i].OnClick := PanelTopLeftClick;
  end;
  RadioGroup1.ItemIndex := 0;
  RadioGroup2.ItemIndex := 1;
  neuesSpiel();
end;


procedure TForm1.PanelTopLeftClick(Sender: TObject);
var
  index, r, i: integer;
begin

  index := (Sender as TComponent).Tag;

  if panels[index].Caption = ' ' then
  begin
    a := a + 1;

    if a mod 2 = 1 then
      fieldShow[index] := 'X'
    else
      fieldShow[index] := 'O';

    ShowField();
    optimalerZug();

  end
  else
    MessageDlg('Schon belegt', mtWarning, [mbOK, mbYes], 0);

end;


procedure TForm1.WirHabenGewinner(PlayerString: String);
var
  i: integer;
begin

  if PlayerString = 'X' then

  begin
    MessageDlg('X hat gewonnen', mtWarning, [mbOK], 0);
    x := x + 1;
  end
  else

  begin
    MessageDlg('O hat gewonnen', mtWarning, [mbOK], 0);
    o := o + 1;
  end;

  neuesSpiel();
end;


procedure TForm1.neuesSpiel();
var
  i: integer;
begin
  for i := 1 to 9 do
    fieldShow[i] := ' ';
  ShowField();
  LabelPointsSchow.Caption := IntToStr(x) + ' : ' + IntToStr(o);
  a := 0;
  optimalerZug();
end;


procedure TForm1.Unentschieden();
begin
  MessageDlg('Keiner hat gewonnen... Es ist ein Unentschieden', mtWarning, [mbOK], 0);
  neuesSpiel();
end;


function TForm1.rating(gameField: array of char): integer;
var
  i: integer;
begin
  result := 0;
  // Prüfung Zeilen
  for i := 0 to 2 do
  begin
    if ((gameField[i * 3] = gameField[i * 3 + 1]) AND (gameField[i * 3 + 1] = gameField[i * 3 + 2])) then
    begin
      if (gameField[i * 3] = 'X') then
        result := -1;
      if (gameField[i * 3] = 'O') then
        result := 1;
    end;
  end;

  // Prüfung Spalten
  for i := 0 to 2 do
  begin
    if ((gameField[i] = gameField[i + 3]) AND (gameField[i + 3] = gameField[i + 6])) then
    begin
      if (gameField[i + 3] = 'X') then
        result := -1;
      if (gameField[i + 3] = 'O') then
        result := 1;
    end;
  end;

  // Prüfung Diagonale\
  i := 0;
  if ((gameField[i] = gameField[i + 4]) AND (gameField[i + 4] = gameField[i + 8])) then
  begin
    if (gameField[i + 8] = 'X') then
      result := -1;
    if (gameField[i + 8] = 'O') then
      result := 1;

  end;

  // Prüfung Diagonale/
  i := 0;
  if ((gameField[i + 2] = gameField[i + 4]) AND (gameField[i + 4] = gameField[i + 6])) then
  begin
    if (gameField[i + 6] = 'X') then
      result := -1;
    if (gameField[i + 6] = 'O') then
      result := 1;
  end;

end;


function TForm1.ZuegeSetzen(currentField: Array of char; currentPlayer: char; deep: integer): integer;
var
  i, currentrating, extremeRating: integer;
  nextplayer: char;
begin
  currentrating := rating(currentField);
  if currentrating = -1 then
    result := -1;
  if currentrating = 1 then
    result := 1;
  if currentrating = 0 then
  begin
    if prüfungUnentschieden(currentField) = True then
      result := 0
    else
    begin
      if deep = 0 then
        result := 0
      else
      begin
        if currentPlayer = 'X' then
        begin
          nextplayer := 'O';
          extremeRating := 1
        end
        else
        begin
          nextplayer := 'X';
          extremeRating := -1;
        end;

        for i := 0 to 8 do
        begin
          if currentField[i] = ' ' then
          begin
            currentField[i] := currentPlayer;
            currentrating := ZuegeSetzen(currentField, nextplayer, deep - 1);
            if currentPlayer = 'X' then
            begin

              if currentrating < extremeRating then

                extremeRating := currentrating;
            end
            else
            begin
              if currentrating > extremeRating then
                extremeRating := currentrating;
            end;

            currentField[i] := ' ';

          end;
        end;
        result := extremeRating;
      end;
    end;
  end;

end;


function TForm1.prüfungUnentschieden(currentField: array of char): boolean;
var
  j, b: integer;
begin
  b := 0;
  for j := 0 to 8 do
    if currentField[j] <> ' ' then
      b := b + 1;

  if b > 8 then
    result := True
  else
    result := False;
end;


procedure TForm1.RadioGroup1Click(Sender: TObject);
begin
  // if RadioGroup1.ItemIndex = 0 then
  // if RadioGroup1.ItemIndex = 1 then
  optimalerZug();
  // if RadioGroup1.ItemIndex = 2 then

end;


procedure TForm1.RadioGroup2Click(Sender: TObject);
begin
  if RadioGroup2.ItemIndex = 0 then
    Tiefe := 1;
  if RadioGroup2.ItemIndex = 1 then
    Tiefe := 4;
  if RadioGroup2.ItemIndex = 2 then
    Tiefe := 9
end;


procedure TForm1.optimalerZug();
var
  i, fieldbesti, extremeRating, currentrating: integer;
  currentPlayer: char;
  Zugauswahl: array of integer;
begin
  if a mod 2 = 0 then
    currentPlayer := 'X'
  else
    currentPlayer := 'O';
  if (currentPlayer = 'X') And (RadioGroup1.ItemIndex = 1) then
  begin
    extremeRating := 2;
    for i := 1 to 9 do
    begin
      if fieldShow[i] = ' ' then
      begin
        fieldShow[i] := currentPlayer;
        currentrating := ZuegeSetzen(fieldShow, 'O', Tiefe);
        if currentrating = extremeRating then
        begin
          SetLength(Zugauswahl, 1 + Length(Zugauswahl));
          Zugauswahl[Length(Zugauswahl) - 1] := i;
        end;
        if currentrating < extremeRating then
        begin
          extremeRating := currentrating;
          SetLength(Zugauswahl, 1);
          Zugauswahl[0] := i;
        end;

        fieldShow[i] := ' ';

      end;
    end;
    fieldbesti := Zugauswahl[Random(Length(Zugauswahl))];
    fieldShow[fieldbesti] := 'X';
    a := a + 1;
    ShowField();
  end;

  if (currentPlayer = 'O') And (RadioGroup1.ItemIndex = 2) then
  begin
    extremeRating := -2;
    for i := 1 to 9 do
    begin
      if fieldShow[i] = ' ' then
      begin
        fieldShow[i] := currentPlayer;
        currentrating := ZuegeSetzen(fieldShow, 'X', Tiefe);
        if currentrating = extremeRating then
        begin
          SetLength(Zugauswahl, 1 + Length(Zugauswahl));
          Zugauswahl[Length(Zugauswahl) - 1] := i;
        end;
        if currentrating > extremeRating then
        begin
          extremeRating := currentrating;
          SetLength(Zugauswahl, 1);
          Zugauswahl[0] := i;
        end;

        fieldShow[i] := ' ';

      end;
    end;
    fieldbesti := Zugauswahl[Random(Length(Zugauswahl))];
    fieldShow[fieldbesti] := 'O';
    a := a + 1;
    ShowField();
  end;
end;

end.
